# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: 
      - '**' 
  pull_request:
    branches: [ "main", "staging" ] # production, staging

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Tests
        run: npm run test --if-present

  sonarQube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        
      - name: SonarQube Scan 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: npm run sonar 

  package:
    runs-on: ubuntu-latest
    needs: [lint, test, sonarQube] 
    steps:
      - uses: actions/checkout@v4
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build & Push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}

  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    needs: package 
    environment:
      name: staging
      url: ${{vars.URL}}   
    steps:
    - name: Deploy to EC2 via SSH in Staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST  }}
        username: ubuntu 
        key: ${{ secrets.EC2_SSH_KEY  }}
        envs: APP_NAME
        script: |
          echo "---------- Start deploy-staging.sh on EC2 ----------"
          chmod +x ${{vars.PATH_DEPLOY}}
          bash ${{vars.PATH_DEPLOY}}
          echo "---------- Finished deploy-staging.sh ----------"
      env:
          APP_NAME: auth

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: package 
    environment:
      name: staging
      url: ${{vars.URL}}
    steps:
    - name: Deploy to EC2 via SSH in Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu 
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: APP_NAME
        script: |
          echo "---------- Start deploy-prod.sh on EC2 ----------"
          chmod +x ${{vars.PATH_DEPLOY}}
          bash ${{vars.PATH_DEPLOY}}
          echo "---------- Finished deploy-prod.sh ----------"
      env:
        APP_NAME: auth

    # - name: Notify
    #   uses: appleboy/telegram-action@master
    #   with:
    #     to: ${{ secrets.TG_CHAT_ID }}
    #     token: ${{ secrets.TG_BOT_TOKEN }}
    #     message: "ðŸš¨ Deploy failed at ${{ github.sha }}"
          

